/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
const socketServer = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, console.log(`Backend server is running on port ${port}`));
server.on('error', onError);
server.on('listening', onListening);

const io = socketServer(server
//   , {
//   cors: {
//     origin: "http://localhost:3000",
//     methods: ["GET", "POST", "PUT", "DELETE"],
//   },
// }
);

// io.on("connection", socket => {
//   console.log(`⚡: ${socket.id} user just connected!`);
//   console.log(socket.connected); 
//   // socket.emit('showActivities', { message: "123❎" });
//   // 添加對 'getActivities' 事件的處理
//   socket.on('getActivities', (data) => {
//     // 在這裡處理獲取活動的邏輯
//     // const userId = data.userId; // 在客戶端 emit 時傳遞 userId
//     // const activities = fetchActivities(userId); // 根據 userId 獲取活動列表
//     console.log("data: ", data);
//     socket.emit('getActivities', data);
//   });

//   // socket.on('disconnect', () => {
//   //   console.log('🔥: A user disconnected');
//   // });
// });

io.on('connection', (socket) => {
  console.log('User connected: ', socket.id);
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}